0;136;0c\Input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename mailing-lists-sieve.info
@include version.texi
@settitle mailing-lists-sieve Manual @value{VERSION}
@c %**end of header

@copying
This manual is for mailing-lists-sieve (version @value{VERSION}, @value{UPDATED}), which generates Sieve scripts for mailing lists and uploads them over ManageSieve.

Copyright @copyright{} 2010 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to
copy and modify this GNU manual.  Buying copies from the FSF
supports it in developing GNU and promoting software freedom.''
@end quotation
@end copying
@dircategory Email
@direntry
* mailing-lists-sieve: (mailing-lists-sieve). 	       Generates and uploads Sieve scripts for mailing lists.
@end direntry
@setchapternewpage off

@titlepage
@title mailing-lists-sieve
@subtitle Updated @value{UPDATED}
@author Dilyan Palauzov
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@headings double
@contents
@ifnottex
@node Top, Introduction, (dir), (dir)
@top mailing-lists-sieve

@end ifnottex

This manual is for mailing-lists-sieve (version @value{VERSION}, @value{UPDATED}).
@menu
* Introduction::                
* History::                     
* Installation and Configuration::  
* Uploaders::                   
* Generators::                  
* Integration with Listserv::   
* Reporting Bugs::              
* GNU Free Documentation License::  

@detailmenu
 --- The Detailed Node Listing ---

Uploaders

* managesieve::                 
* timsieved_fs::                
* Writing your own uploader::   

Generators

* listserv::                    
* Writing your own generator::  

@end detailmenu
@end menu

@node  Introduction, History, Top, Top
@chapter Introdution
This is mailing-lists-sieve (version @value{VERSION}, @value{UPDATED}), an utility to generate Sieve scripts (RFC 5228) for Listserv mailing lists and upload them with the ManageSieve (RFC5804) protocol.  The programme can be generate scripts for other mailing lists managers or upload them by other means.

The purpose of the generated scripts is to reject mails at SMTP time, instead of bouncing them later, thus keeping the mail server whitelisted.

When invoked with the parameter "-a", mailing-lists-sieve installs the scripts for all supported mailing lists.

When invoked with a name of a mailing list as a parameter, mailing-lists-sieve installs the scripts for that list.

mailing-lists-sieve can integrate into listserv and upload the scripts for the mailing lists, when a new subscriber is added or removed from the list.

Support for mailing lists systems other than listserv can be ordered.

@node History, Installation and Configuration, Introduction, Top
@chapter History
I (the author) noticed once upon a time that the mail server I manage is blacklisted and in turn the sent mails reach the spam folders of the recipients. I wanted very much to get out of the black lists and came to the idea that the black listing is caused by the bounces sent from listserv. My wish was to create a system, that can reject mails during the SMTP dialog instead of letting listserv receive and then bounce them. The idea was to generate for every mailing list a Sieve script, that is evaluated at SMTP-time and rejects mails during the SMTP dialog, when feasible. Unlike other systems for mailing lists, where the not-good emails are either discarded or sent to the listowners, with this approach my listowners are not bothered with manually proceeding the (probably spam) emails, and enjoy more free time. At the same time no email is lost.

What is Sieve? A language for filtering emails. Developed by IETF within the Sieve Working Group, it allows to define rules for out-of-office messages, to put an incoming email in a folder, depending on the sender or the mail size, but most of all: Sieve/RFC5228 is a OS-independant way to say what emails shall be returned back to the sender, instead of ending in your spam folder. 

So I ended writing two programmes: one to generate and upload the scripts, and one to evaluate them.  After a while I noticed, that the features in the programme for script generation and upload can be used by other programmes for communication with listserv over the TCPGUI interface.  I moved out the code for the script generation into a separate library.  I generalized the rest code for the script upload, so that other mailing lists management systems can use it to upload their scripts and here is it.

The other two parts: the library for communication with Listserv and for the script evaluation can be found at @url{http://mail.aegee.org/software} (when published).

At the end I succeeded: now I reject a lot of emails during the SMTP dialog and my server is not blacklisted.

@node Installation and Configuration, Uploaders, History, Top
@chapter Installation and Configuration
mailing-lists-sieve is installed with the usual ./confugure && make install paradigm.  It depends on liblistserv 1.0, glib >= 2.22.3 and libgsasl > 1.4.

The programme settings are stored in a configuration file.  This is @file{~/.mailing-lists-sieve}, or if not found, @file{$@{sysconfdir@}/mailing-lists-sieve.conf}.  $@{sysconfdir@} is specified at `./configure' with @code{--sysconfdir} and is usually /etc or /usr/local/etc.

The syntax of the configuration file is explained in the glib manual (http://library.gnome.org/devel/glib/stable/ -> Key-value file parser).

Each module in mailing-lists-sieve defines the use of a separate section.  Here is a sample configuration file:

@example
[listserv]
host=localhost
user=1@@example.org
password=PW1ATEXAMPLEORG
capabilities=11
#port = 2306
[managesieve]
host=mail.example.org
user=sieve
password=a27yt5>h6
[timsieved_fs]
sievedir=/usr/sieve
extensions=notify,reject,envelope
owner=96
group=12
@end example

@node  Uploaders, Generators, Installation and Configuration, Top
@chapter Uploaders

mailing-lists-sieve has modules for generating and uploading the Sieve scripts.  The latter are called uploaders.  With this release you get two uploaders -- one using the ManageSieve protocol and one that puts the files on the right place on the filesystem, where cyrus' timsieved would put them.

@menu
* managesieve::                 
* timsieved_fs::                
* Writing your own uploader::   
@end menu

@node managesieve, timsieved_fs, Uploaders, Uploaders
@section managesieve

managesieve uploads Sieve scripts using the ManageSieve (RFC 5804) protocol.  The module uses the same username/password for authentication while uploading all scripts, and the name of the script (without domain) for authorization.

The module supports Login, Cram-MD5 and Digest-MD5 authentication mechanisms with the gsasl library.  The installed scripts are activated.

Configuation

The managesieve module is adjusted within the [managesieve] section of the configuration file.

@table @code
@item host
The host where the ManageSieve server runs.
@item port
The port where the Managesieve Server runs.  If missing, 2000 is assumed.
@item user
The user used for authentication.
@item service
For authentication algorithms that have the sence of service, the value of this keyword is transmitted.
@item password
The password used for authentication.
@item realm
The realm used for authentication.
@end table

Notes for using managesieve module with cyrus' timsieved.

Module managesieve is succesfully tested with cyrus' timsieved.

The genrated scripts can get very big, so adjust appropriately sieve_maxscriptsize in @file{imapd.conf}.

To upload the scripts for a mailing list, a mailbox called as the mailing list must exist.  Otherwise the authorization does not succeed.  Patch cyrus' timsieved's @file{parser.c}.  Find the function @code{cmd_authenticate} and ignore the result of calling @code{mboxlist_detail} (approx. line 716, put in comment @code{ret = FALSE; goto cleanup;}.

Limitations:  No support for TLS, Kerberos; No script deletion

@node timsieved_fs, Writing your own uploader, managesieve, Uploaders
@section timsieved_fs

timsieved_fs puts the files on the right place in the filesystem, where they would be put upon upload by curus' timsieved .  timsieved_fs does not generate bytecode for the scripts, just creates empty @file{.bc} files and symlink from them to @file{default}.  This link is the internal way for timsieved to mark scripts as activated.

Please note, that the "rigth place" does work only for single domain installations.  

Configuration

The timsieved_fs module is adjusted  within the [timsieved_fs] section of the configuration file.

@table @code
@item sievedir
The home where sieve Script are installed.  A script comes in the directory @file{sievedir/?/?user/}, where ? is the first character of the user, for which the script is installed.
@item extensions
The supported extensions by the sieve interpereter (could be used for script generation, but is currently not).
@item owner
The number of the owner (uid), who will own the files after installation, with umask 600.
@item group
The number of the group (gid), which will own the files after installation.
@end table

@node  Writing your own uploader,  , timsieved_fs, Uploaders
@section Writing your own uploader
mailing-lists-sieve can be extended with new uploaders using the libtool dlpreopen mechanism.  To add a new uploaded, create a file in src/uploaders.c exporting:

@deftypefn Function char** extensions ()
Used to initalize the module and returns a list of capabilities, that the generated scripts will use (the return value is currently ignored).
@end deftypefn
@deftypefn Function void install (char* @var{address}, char* @var{data})
Installs a script for @var{address} with the supplied content/@var{data} and activates that script.
@end deftypefn
@deftypefn Function void delete (char* @var{address})
Deletes a script proceeding the emails for @var{address}.
@end deftypefn
@deftypefn Function void close ()
Closes the connection and frees the allocated resources.
@end deftypefn
Each module can use static data, the functions are called sequentially.

See @file{src/uploaders/timsieved_fs.c} for a sample uploader.  The libtool dlpreopen mechanism requires you to use @code{_LTX_} in function names.  Consider extending @file{Makefile.am}.

@node Generators, Integration with Listserv, Uploaders, Top
@chapter Generators
The generators communicate with the software for managing mailing lists.  The generators find out which mailing lists are managed by the mailing lists server and generate Sieve scripts for that lists.

@menu
* listserv::                    
* Writing your own generator::  
@end menu

@node  listserv, Writing your own generator, Generators, Generators
@section listserv
The listserv generator communicates with Listserv.  Its behaviour is adjusted in the [listserv] section of the configuration file with the keys:

@table @code
@item host
The host where Listserv runs, optionally in format host:port
@item user
The email address, that is used to authenticate towards Listserv
@item password
The password used for authentication
@item capabilities
The capabilities, the generated scripts shall stick to.  Check the documentation for the extensions parameter in the function listserv_getsieve_scripts in liblistserv.
@end table

When the host, user and password are not specified, the defaults are read from the liblistserv configuration file.

@node Writing your own generator,  , listserv, Generators
@section Writing your own generator
@file{src/sample.c} demonstrates how to write a new script generator, exporting:

@deftypefn Function char** supported_lists ()
Called to initialize the module.  Returns a NULL-terminated list of mailing lists, which can be managed by the generator module.  The list of lists is freed by the generator module.
@end deftypefn
@deftypefn Function char** get_scripts (char* @var{listname})
Generates the scripts for the mailing list @var{listname} and returns returns a NULL-terminated pair of the script names and script content.  E.g. for the script @var{ABC-L}, the return value might look like @{"@var{ABC-L}", "#script for ABC-L", "@var{ABC-L}-request", "#script for proceeding the mails for ABC-L-request", NULL@}.
@end deftypefn
@deftypefn Function void  upload ()
(optional) Called to free the allocated resources.
@end deftypefn

@node Integration with Listserv, Reporting Bugs, Generators, Top
@chapter Integration with Listserv
mailing-lists-sieve can act as list exit in Listserv and upload the list' scripts when a subscriber joins or leaves a mailing list, or is added or removed.  To achieve this, create a symbolic link from @file{/home/listserv/home/MAILING_LISTS_SIEVE} to the actual @file{mailing-lists-sieve} , create a configuration file for mailing-lists-sieve in @file{/home/listserv/.mailing-lists-sieve} (or a global one), add to listserv's LIST_EXIT option MAILING_LISTS_SIEVE and eventually add to the configuration of each mailing list @code{Exit = MAILING_LISTS_SIEVE}.

Listserv does not offer a list exit, that is invoked, when the list configuration changes.  In cases where Send is changed from Private to Public, or new Editors are added, the site administrator is supposed to upload the scripts manually by invoking @code{mailing-lists-sieve listname}

@node Reporting Bugs, GNU Free Documentation License, Integration with Listserv, Top
@chapter Reporting Bugs

We welcome bug reports and suggestions for any aspect of mailing-lists-sieve: system, programs, documentation, installation, anything.  Please email them to
@email{mailing-lists-sieve@@aegee.org}.  You can get the latest version of mailing-lists-sieve from @uref{http://mail.aegee.org/software/mailing-lists-sieve/}.

For bug reports, please include enough information for the maintainers
to reproduce the problem.  Generally speaking, that means:

@itemize @bullet
@item the version number of Texinfo and the program(s) or manual(s) involved.
@item hardware and operating system names and versions.
@item the contents of any input files necessary to reproduce the bug.
@item a description of the problem and samples of any erroneous output.
@item any unusual options you gave to @command{configure}.
@item anything else that you think would be helpful.
@end itemize

When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.

Patches are most welcome; if possible, please make them with
@samp{@w{diff -c}} (@pxref{Top,, Overview, diff, Comparing and Merging
Files}) and include @file{ChangeLog} entries (@pxref{Change Log,,,
emacs, The GNU Emacs Manual}), and follow the existing coding style.

@node  GNU Free Documentation License,  , Reporting Bugs, Top
@appendix GNU Free Documentation License
@include fdl-1.3.texi

@bye
